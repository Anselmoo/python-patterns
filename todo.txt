

* Clean up references to the “Module Global” pattern,
  since I apparently titled it “Global Object” pattern instead.

Remaining GoF patterns:

Creational Patterns

x Abstract Factory
x Builder
x Factory Method
X Prototype
  Singleton
    X Prebound Methods
    X Sentinel Object
    X Module Globals
     (Flyweight, below)

Structural Patterns

  Adapter
  Bridge
x Composite
x Decorator
  Facade
  Flyweight
  Proxy

Behavioral Patterns

  Chain of Responsibility
  Command
  Interpreter
x Iterator
  Mediator
  Memento
  Observer
  State
  Strategy
  Template Method
  Visitor


Talk about private and protected methods.

Zope security: "principle" instead of "user"?
Zope: not know the difference between an abstraction
and a confusing synonym. Equated obscurity with abstraction.

When I do Facade, take quotes from:
http://lists.squeakfoundation.org/pipermail/squeak-dev/1998-October/017019.html
"The key in making great and growable systems is much more to design how its
modules communicate rather than what their internal properties and
behaviors should be"

Can I use this?
http://objology.blogspot.com/2011/09/one-of-best-bits-of-programming-advice.html
"Take some sort of "Loader" for example. The focus here is on the unit
of work it does. It'll have lots of instance variables, lots of
arguments, and pass lots of data around probably. Now instead replace
that with a LoadRecord and a LoadStream. I'm reasonably confident you'll
end up with something that is more akin to what the original Founding
Fathers of OOP had in mind. We want to create objects that describe what
they are, and then bind behavior to them, rather than focus on what they
do, and then figure out what data they'll need to do that."



Why bottom out? Python strings are made of — strings!

in Go I keep making error

line = path + '\n'
TODO: what exception?

strings!
smaller piece of string? it’s a string too!


>>> p = 'Python'
>>> s = 'Yet all experience is an arch'
>>> s[4:7]
'all'
>>> type(s[4:7])
<class 'str'>
>>> s[4]
'a'
>>> type(s[4])
<class 'str'>


What should be at top of file; what order functions should go in.


Mention modules that prevent import * from subordinate modules
so the main package is where you import * its classes instead?
Probably import * just isn’t important enough today to mention:
  # multiprocessing/context.py
  __all__ = ()


Mention this someday?
/home/brandon/cpython/Lib/_collections_abc.py
27:__name__ = "collections.abc"


Discuss the happy fact that Python lacks any concept of a ``protected``
or ``private`` method.

“>>>”
chapters 8,9,10 move earlier, between 4/5
closure vs class with __call__.

PEP-8 says “if not somelist”
Walrus; comprehensions
star unpacking
does dict-like stay ordered
setdefault is hard to read and can lead to throwing away new objects
do linters check for inner function local names that shadow names further out?
“private” attributes

mix-in classes “use mix-ins like this”
“throw”? “ticks remaining”
“often more heavyweight”
“class registration”?!
__set_name__
subprocess.run
